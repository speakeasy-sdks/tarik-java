/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package tarik.LK;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import tarik.LK.utils.HTTPClient;
import tarik.LK.utils.HTTPRequest;
import tarik.LK.utils.JSON;
import tarik.LK.utils.SerializedBody;

public class Order {
	
	private SDKConfiguration sdkConfiguration;

	public Order(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Get JSON schema for order
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public tarik.LK.models.operations.OrderSchemaApiV1OrdersSchemaGetResponse orderSchemaApiV1OrdersSchemaGet() throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = tarik.LK.utils.Utils.generateURL(baseUrl, "/api/v1/orders/schema");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        tarik.LK.models.operations.OrderSchemaApiV1OrdersSchemaGetResponse res = new tarik.LK.models.operations.OrderSchemaApiV1OrdersSchemaGetResponse(contentType, httpRes.statusCode()) {{
            response = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (tarik.LK.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                tarik.LK.models.shared.Response out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), tarik.LK.models.shared.Response.class);
                res.response = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * Add new order
     * Checks if JSON has valid schema and adds request to create new order. No multiple orders will be created for the same **order_id**, even if request is accepted. Only first order request for **order_id** is created.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public tarik.LK.models.operations.OrderValidatedApiV1OrdersPostResponse orderValidatedApiV1OrdersPost(tarik.LK.models.shared.Order request, tarik.LK.models.operations.OrderValidatedApiV1OrdersPostSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = tarik.LK.utils.Utils.generateURL(baseUrl, "/api/v1/orders");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = tarik.LK.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json;q=1, application/json;q=0");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = tarik.LK.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        tarik.LK.models.operations.OrderValidatedApiV1OrdersPostResponse res = new tarik.LK.models.operations.OrderValidatedApiV1OrdersPostResponse(contentType, httpRes.statusCode()) {{
            response = null;
            httpValidationError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (tarik.LK.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                tarik.LK.models.shared.Response out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), tarik.LK.models.shared.Response.class);
                res.response = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
        }
        else if (httpRes.statusCode() == 422) {
            if (tarik.LK.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                tarik.LK.models.shared.HTTPValidationError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), tarik.LK.models.shared.HTTPValidationError.class);
                res.httpValidationError = out;
            }
        }

        return res;
    }
}